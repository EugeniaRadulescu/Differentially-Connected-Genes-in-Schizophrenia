
####### Differential Gene Expression Analysis #######


message("\n--- Performing Differential Gene Expression Analysis ---")

# Use the log2+1 transformed data before applying cleaningY():

NotCleanExprProtDx<-list("DLPFC"=datExpr_dlpfc,
                         "Hippo"=datExpr_hippo,
                         "Caudate"=datExpr_caudate)

y <- NotCleanExprProtDx[[i]] # The log2tr expression data for DLPFC, hippo, caudate


# 'mod' should be the one loaded from the cleaned data files
# Create a list with models for each region:

mod<-list(mod_dlpfc=mod_dlpfc,mod_hippo=mod_hippo,mod_caudate=mod_caudate)

message("Fitting linear model with limma...")

# This part is for DLPFC, Hippo
fitGene<-vector(mode = "list",length = 2)
eBGene<-vector(mode = "list",length = 2)

for(i in 1:3){
  fitGene[[i]] <- lmFit(y[[i]], design = mod[[i]])
  eBGene[[i]] <- eBayes(fitGene[[i]])
}


# Quality-check:
message("Plotting mean-variance trend...")
plotSA(fitGene[[i]], main = "Final Model: Mean-variance Trend (Region)") # Good for checking normalization

message("Top table of differential gene expression results (first few rows):")

# For DLPFC and Hippo:

sigGene_dx <- topTable(eBGene[[i]], coef = 2, p.value = 1, number = nrow(fitGene[[i]]), sort = "none")
print(head(sigGene_dx[, -c(1, 3, 6:10)])) # Print selected columns for brevity

# Identify significantly differentially expressed genes (FDR <= 0.05)
sigGene <- sigGene_dx[sigGene_dx$adj.P.Val <= 0.05, ]

message(paste("Number of significantly differentially expressed genes (adj.P.Val <= 0.05):", nrow(sigGene)))

# Plotting density of expression values (optional, useful for visualization)

message("Plotting density of expression values for Caudate data...")
nsamples <- ncol(y[[i]])
col <- brewer.pal(min(nsamples, 12), "Paired") # Use min(nsamples, 12) for brewer.pal limit
samplenames <- colnames(y[[i]])

plot(density(y[[i]][, 1]), col = col[1], lwd = 2, ylim = c(0, 0.5), las = 2, main = "", xlab = "")
title(main = "B. Filtered Data (Region)", xlab = "Log2 Transformed Expression")

for (i in 2:nsamples) {
  den <- density(y[[i]][, i])
  lines(den$x, den$y, col = col[i], lwd = 2)
}
legend("topright", samplenames, text.col = col, bty = "n", cex = 0.8)

# Summarize differential expression results (up/down regulated genes)
message("Summary of differential expression results (up/down regulated genes):")
print(summary(decideTests(fitGene[[2]]))) 

collectGarbage() # Final garbage collection
message("\nScript execution complete.")

# Save the DGE results
DEGs<-vector(mode="list",length=3);
names(DEGs)<-c("DLPFC","Hippo","Caudate")
DEGs[[i]]<-sigGene
DEGs[[i]]$Symbol<-sigGene_rownames

# Find regional consistency for DEGs
intersect(intersect(DEGs$DLPFC$Symbol,DEGs$Hippo$Symbol),DEGs$Caudate$Symbol)

save(DEGs,mod,file="Differential_gene_expression_3regions_07112025.RData")

