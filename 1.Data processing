######### Load the required packages ###########

library(WGCNA) 

options(stringsAsFactors=FALSE)

library(SummarizedExperiment)
library(plyr)
library(sva)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(knitr)
library(biomaRt) 
library(ggplot2)
library(ppcor)
library(Hmisc)
library(ggpmisc)
library(igraph)
library(tibble)
library(dplyr)
library(genefilter)
library(data.table)
library(VennDiagram)
library(gridExtra)
library(readxl)
library(openxlsx)
library(pheatmap)
library(ComplexHeatmap)
library(circlize)
library(RColorBrewer)
library(rrvgo) 
library(MASS)
library(flextable)
library(psych)
library(huxtable)
library(kableExtra)
library(tidyr)
library(vtable)
library(table1)
library(variancePartition) 
library(limma)
library(GGally)
library(broom)
library(eulerr)
library(GeneOverlap)
library(SuperExactTest)
library(GOSemSim)
library(clusterProfiler)
library(recount) 
library(jaffelab)
library(sva)
library(matrixStats)
library(lattice)
library(vsn)

######### Samples selection and data normalization ###############

# Load the SummarizedExperiment objects containing gene expression (bulk RNA-Seq) and degradation matrices for DLPFC, Hippocampus and Caudate

region=c('DLPFC','HIPPO','Caudate')

### Demographics:

age.min = 16; 
age.max = 80
case = c('Control','SCZD')
ethnicity = c('CAUC','AA')

rse_gene_RiboZero = rse_gene[,rse_gene$Age >= age.min &
                               rse_gene$Age <= age.max & 
                               rse_gene$Dx %in% case &
                               rse_gene$Race %in% ethnicity &
                               unlist(rse_gene$RIN)>=6.5]

data<-assays(rse_gene_RiboZero)
data<-as.data.frame(data[[1]])

names(data)

collectGarbage()

# Check distribution:

counts=as.matrix(data)
pl <- meanSdPlot(counts)
pl$gg + ylim(0,100)

# Get the RPKM:

geneRpkm = recount::getRPKM(rse_gene_RiboZero, "Length")

geneRpkm<-as.matrix(geneRpkm)

tpmcutoff <- expression_cutoff(geneRpkm, max_cut=NULL, seed = 20171025) 

abundance_cut=c(0.18,0.22) # DLPFC and HIPPO 0.18, Caudate 0.22

abundance_cut=abundance_cut

x=length(rse_gene_RiboZero$RNum) # The number of samples

n=round(x*80/100)
f1<-kOverA(n,abundance_cut) 
flist<-filterfun(f1)

gIndex=which(genefilter(geneRpkm,flist))

abundance_red<-as.data.frame(geneRpkm[gIndex,])

yExprs = log2(abundance_red+1) # Expression normalization

rse_gene_RiboZero = rse_gene_RiboZero[gIndex,]

# Create gene identifiers:

ID<-as.data.frame(rowRanges(rse_gene))
ID<-rownames_to_column(ID,var="Rownames_abundance")

z<- ID$Rownames_abundance %in% rownames(yExprs)

# Change gencode ID with symbol ID:

Gene_IDs<-ID[z,]

Gene_Symbol<-Gene_IDs$Symbol
datExpr_Symbol<-cbind(Gene_Symbol,yExprs)

Gene_Symbol<-as.data.frame(unique(datExpr_Symbol[,1]))
names(Gene_Symbol)<-"Gene_Symbol"

datExpr_Symbol<-datExpr_Symbol[!duplicated(datExpr_Symbol$Gene_Symbol),]
datExpr_Symbol<-datExpr_Symbol[-3,]

rownames(datExpr_Symbol)=NULL
datExpr_Symbol<-column_to_rownames(datExpr_Symbol,var="Gene_Symbol")

Gene_Symbol<-as.data.frame(rownames(datExpr_Symbol))
names(Gene_Symbol)<-"Symbol"

Final_Gene_IDs<-join(Gene_Symbol,Gene_IDs,by="Symbol",type="inner")
Final_Gene_IDs<-Final_Gene_IDs[!duplicated(Final_Gene_IDs$Symbol),]

identical(Final_Gene_IDs$Symbol,rownames(datExpr_Symbol)) # Sanity check; it should be TRUE

# Remove expression outliers from (log2tr + 1) data:

thresholdZ.k = -4   # This is the more lenient threshold                  
dist = dist(t(datExpr_Symbol))
tree = hclust(dist, method = "a")
Z.k = -scale(colSums(as.matrix(dist)));
sum(Z.k < thresholdZ.k) # This gives you actually the number of outliers
min(Z.k)  

plotClusterTreeSamples(t(datExpr_Symbol),main="Sample clustering to detect outliers log2tr",sub="",xlab="",
                       cex.lab=1.5,cex.axis=1.5,cex.main=1.5)

# Plot a line to show the cut

abline=c(80,100) # 80 for DLPFC, 100 for hippo, 100 for Caudate
abline(h = abline, col = "red");  

# Determine the cluster under the line

clust = cutreeStatic(tree, cutHeight = abline, minSize = 10); 
table(clust)

# clust 1 contains the samples we want to keep.

keepSamples = (clust==1)
datExpr_minusOutliers=datExpr_Symbol[,keepSamples]

# Repeat:

dist = dist(t(datExpr_minusOutliers))
tree = hclust(dist, method = "a")
Z.k = -scale(colSums(as.matrix(dist)));
sum(Z.k < thresholdZ.k) # This gives you actually the number of outliers
min(Z.k) 

# Check normalization:

meanSdPlot(as.matrix(datExpr_minusOutliers))

RNum<-colnames(datExpr_minusOutliers)

# For DLPFC and Caudate
RNum<-as.data.frame(gsub("_.*","",RNum))
names(RNum)<-"RNum"

colnames(datExpr_minusOutliers)<-RNum$RNum

# Create the metadata table for each brain region

RNum<-as.data.frame(RNum)
Metadata<-as.data.frame(colData(rse_gene_RiboZero))
Metadata<-join(RNum,Metadata,by="RNum",type="inner")

colnames(datExpr_minusOutliers)<-RNum$RNum

identical(Metadata$RNum,colnames(datExpr_minusOutliers)) # Sanity check:
# TRUE

# Include genomic PCs in the covariates table:

LIBD_postmortem.AA_EA.info_0.8.cleaned_ids.updated_ids.nodup.call_0.8.updated_snp.geno_0.01.maf_0.05.hwe_0.001.noambig.rs.clump_200_100_0.2.twice.pca.evec <- read.delim("/directory/LIBD_postmortem.AA_EA.info_0.8.cleaned_ids.updated_ids.nodup.call_0.8.updated_snp.geno_0.01.maf_0.05.hwe_0.001.noambig.rs.clump_200_100_0.2.twice.pca.evec.txt")
ancestry<-LIBD_postmortem.AA_EA.info_0.8.cleaned_ids.updated_ids.nodup.call_0.8.updated_snp.geno_0.01.maf_0.05.hwe_0.001.noambig.rs.clump_200_100_0.2.twice.pca.evec

index<-ancestry$IID %in% Metadata$BrNum

ancestry<-ancestry[index,]
ancestry<-ancestry[,-c(1,13:22)]

names(ancestry)<-c("BrNum","snpPC1","snpPC2","snpPC3","snpPC4","snpPC5","snpPC6",
                   "snpPC7","snpPC8","snpPC9","snpPC10")

Metadata<-join(Metadata,ancestry,by="BrNum",type="inner")

RNum_final<-Metadata$RNum

index<-colnames(datExpr_minusOutliers) %in% RNum_final

datExpr_minusOutliers<-datExpr_minusOutliers[,index]

identical(Metadata$RNum,colnames(datExpr_minusOutliers)) # Sanity check


# Add cov_rse matrix for the three regions 

cov_rse<-list(cov_rse_dlpfc,cov_rse_hippo,cov_rse_caudate)

colnames(cov_rse[[1]])
colnames(cov_rse[[1]])<-gsub("_.*","",colnames(cov_rse[[1]]))

cov_rse_region<-cov_rse[[1]][,RNum_final]


# Load the metadata for the three regions
# Create the final table with demographics and technical covariates

dt<-table1(~ Age + RIN + factor(Race) +
       factor(Sex) + PMI | Region*Dx, data = Metadata_3regs, overall = FALSE)

dt<-as.data.frame(dt)

library(openxlsx)
wb <- createWorkbook()
addWorksheet(wb, "summary")

writeData(wb, "summary", x = dt)
saveWorkbook(wb, "Demographics_and_technical_covariates.xlsx", overwrite = TRUE)

collectGarbage()


###### Check the samples overlap across the 3 regions #############

# Load the metadata for the three regions
# Samples:

BrNum_DLPFC<-Metadata_DLPFC$BrNum
BrNum_Hippo<-Metadata_Hippo$BrNum
BrNum_Caudate<-Metadata_Caudate$BrNum

library(VennDiagram)

x<-list(BrNum_DLPFC=BrNum_DLPFC,BrNum_Caudate=BrNum_Caudate,
        BrNum_Hippo=BrNum_Hippo)

ov<-calculate.overlap(x)

venn.plot <- venn.diagram(
  x=x,
  filename = NULL,
  lwd = 1,
  fill = c("cornflowerblue", "darkorchid1",'lightgreen'),
  alpha = 0.75,
  label.col = "blue",
  cex = 2, 
  fontfamily = "serif",
  fontface = "bold",
  cat.col = c("cornflowerblue", "darkorchid1",'lightgreen'),
  cat.cex = 1.5,
  cat.fontfamily = "serif",
  cat.fontface = "bold",
  cat.dist = c(0.03, 0.03, 0.03),
  cat.pos = c(-20, 14, -180)
)

grid.draw(venn.plot)

dev.off()


#### Prepare data for expression cleaning with cleaningY() ######

rm(list = ls()) ## Clear workspace

collectGarbage()

# Load the metadata for the three regions
# Load the normalized, no outliers expression data for the three regions:
# Calculate the qSVs from degradation matrices:

colnames(datExpr_minusOutliers)

covMat<-list(cov_rse_dlpfc,cov_rse_hippo,cov_rse_caudate)

covMat<-as.data.frame(assays(covMat[[1]]))
colnames(covMat)

RNum<-as.data.frame(gsub("_.*","",colnames(covMat)))
names(RNum)<-"RNum"

colnames(covMat)<-RNum$RNum

names(covMat)

covMat_log = log2(covMat[,-c(1:2)] +1)

identical(colnames(covMat_log),colnames(datExpr_minusOutliers)) # Sanity check
# TRUE

mod = as.matrix(rep(1,length(colnames(covMat_log))))

set.seed(24)

k = num.sv(covMat_log, mod) 

# k=11 for DLPFC, k=14 for hippo, k=11 for caudate
k=c(11,14)

degPca = prcomp(t(covMat_log))
qSVs=degPca$x[,1:k]
colnames(qSVs) = paste0("PC", 1:ncol(qSVs))

qSV<-as.data.frame(qSVs)
qSV<-rownames_to_column(qSV,var="RNum")

Metadata_Region<-c("DLPFC","Hippocampus","Caudate")
info<-join(Metadata_Region[1],qSV,by="RNum",type="inner")
identical(info$RNum,colnames(datExpr_minusOutliers))

collectGarbage()

# Split expression data by diagnosis:

CTRL_index<-which(info$Dx=="Control")
datExpr_CTRL<-t(datExpr_minusOutliers)[CTRL_index,]
SCZ_index<-which(info$Dx=="SCZD")
datExpr_SCZ<-t(datExpr_minusOutliers)[SCZ_index,]

# Save files and clear workspace

rm(list = ls()) ## Clear workspace
collectGarbage()


###### Multicolinearity assessment DLPFC, Hippo, Caudate #####

# For DLPFC, Hippocampus, and Caudate Brain Regions      

# Load necessary libraries
library(variancePartition) # For canCorPairs and plotCorrMatrix
library(limma)           # For lmFit and eBayes
library(car)             # For vif (Variance Inflation Factor)
library(RColorBrewer)    # For plotting densities
library(jaffelab)        # Assuming jaffelab::cleaningY is from this package

# --- 1. Data Loading ---

# Define base path for data files to avoid repetition

base_path <- "/home/edata/.../.../"

# Load DLPFC data
message("Loading DLPFC data...")
load(file.path(base_path, "Express_DLPFC_notClean_Symbol_297samples_10202022.RData"))
load(file.path(base_path, "Expr_data_uncleaned_byDx_22542Genes_10202022.RData"))

# Assuming 'datExpr_minusOutliers' and 'info' are loaded from these files for DLPFC

info_dlpfc<-info
datExpr_dlpfc<-datExpr_minusOutliers

# Load Hippocampus data
message("Loading Hippocampus data...")
load(file.path(base_path, "Hippocampus/Express_hippo_notClean_Symbol_250samples_12152022.RData"))
load(file.path(base_path, "Hippocampus/Expr_data_uncleaned_byDx_20708Genes_12152022.RData"))

# Assuming these load data appropriate for Hippo (e.g., 'datExpr_hippo' and 'info_hippo')
info_hippo<-info
datExpr_hippo<-datExpr_minusOutliers

# Load Caudate data
message("Loading Caudate data...")
load(file.path(base_path, "Caudate/Express_Caudate_notClean_Symbol_349samples_12162022.RData"))
load(file.path(base_path, "Caudate/Expr_data_uncleaned_byDx_19954Genes_12162022.RData"))

# Assuming these load data appropriate for Caudate (e.g., 'datExpr_caudate' and 'info_caudate')
info_caudate<-info
datExpr_caudate<-datExpr_minusOutliers

# Load combined metadata for all regions
message("Loading combined metadata...")
load(file.path(base_path, "Metadata_3regions_03262024.RData"))

# Display names of loaded metadata (for verification)
message("\nNames of 'info' (assuming DLPFC context initially):")
print(names(info_dlpfc)) 
print(names(info_hippo)) 
print(names(info_caudate))

message("Names of 'Metadata_Caudate':")
print(names(Metadata_Caudate)) # This suggests separate metadata objects might be intended.

# --- 2. Multicollinearity Assessment - General Approach ---

# Assign expression data for initial check (assuming DLPFC data is active)
# It's important to ensure 'datExpr_minusOutliers' and 'info' correspond to the same dataset.

datExpr_minusOutliers<-list("DLPFC"=datExpr_dlpfc,"Hippo"=datExpr_hippo,"Caudate"=datExpr_caudate)
info<-list("DLPFC"=info_dlpfc,"Hippo"=info_hippo,"Caudate"=info_caudate)

geneExpr <- datExpr_minusOutliers[[1]] # This likely comes from the *last* loaded expression data.
# If processing DLPFC first, it should be the DLPFC data.

# Define the full formula for multicollinearity assessment
form_full <- ~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN + rRNA_rate +
  PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 +
  snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
  snpPC8 + snpPC9 + snpPC10

message("\nPerforming initial multicollinearity assessment (full model)...")

# Calculate canonical correlations between pairs of variables in the formula
C_full <- canCorPairs(form_full, info[[1]])
plotCorrMatrix(C_full, dendrogram = "none",
               main = "Canonical Correlations (Full Model)")
message("Correlation matrix plotted for the full model.")

# Fit a linear model for VIF calculation (using an arbitrary gene, expr[,2])
# Transpose geneExpr for lm: samples as rows, genes as columns
expr_transposed <- t(geneExpr)

fit_gene_full <- lm(expr_transposed[, 2] ~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN + rRNA_rate +
                      PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 +
                      snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
                      snpPC8 + snpPC9 + snpPC10, data = info[[1]])

message("VIF values for the full model:")
print(vif(fit_gene_full)) # Check for multicollinearity
collectGarbage() # Free up memory

# --- 3. Region-Specific Multicollinearity Assessment and Data Cleaning ---

# --- 3.1 DLPFC Analysis ---

message("\n--- Analyzing DLPFC ---")
# Reload DLPFC specific data to ensure correct 'datExpr_minusOutliers' and 'info'
# load(file.path(base_path, "Express_DLPFC_notClean_Symbol_297samples_10202022.RData"))
# load(file.path(base_path, "Expr_data_uncleaned_byDx_22542Genes_10202022.RData"))
# load(file.path(base_path, "Metadata_3regions_03262024.RData")) # Reload combined metadata

# Ensure 'info' is specific to DLPFC here, potentially subsetting Metadata_3regions.
# For example, info_dlpfc <- Metadata_3regions[Metadata_3regions$Region == "DLPFC", ]
# For simplicity, assuming 'info' and 'datExpr_minusOutliers' are correctly set by loads.


geneExpr_dlpfc <- datExpr_minusOutliers[[1]]

# Reduced formula for DLPFC based on prior assessment
form_red_dlpfc <- ~ Dx + Age + Sex + mitoRate + RIN +
  PC1 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 +
  snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
  snpPC8 + snpPC9 + snpPC10

message("Fitting reduced model for DLPFC and checking VIF...")
fit_gene_dlpfc_red <- lm(t(geneExpr_dlpfc)[, 2] ~ Dx + Age + Sex + mitoRate + RIN +
                           PC1 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 +
                           snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
                           snpPC8 + snpPC9 + snpPC10, data = info[[1]]) # Make sure 'info' is DLPFC-specific
print(vif(fit_gene_dlpfc_red))
collectGarbage()

message("Plotting correlation matrix for reduced DLPFC model...")
C2_dlpfc <- canCorPairs(form_red_dlpfc, info[[1]])
plotCorrMatrix(C2_dlpfc, dendrogram = "none",
               main = "Canonical Correlations (DLPFC Reduced Model)")
collectGarbage()

# Clean the DLPFC expression data
message("Cleaning DLPFC expression data...")
covs_dlpfc <- "~ Dx + Sex + Race + Age + RIN + mitoRate + snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 +
snpPC7 + snpPC8 + snpPC9 + snpPC10 + PC1 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 +
PC9 + PC10 + PC11"

mod_dlpfc <- model.matrix(as.formula(covs_dlpfc), data = info[[1]]) # Ensure 'info' is correct for DLPFC
cleanExprs_protectDx_dlpfc <- jaffelab::cleaningY(geneExpr_dlpfc, mod_dlpfc, P = 2)

# save(cleanExprs_protectDx_dlpfc, info, covs_dlpfc, mod_dlpfc,
#      file = "cleanExprs_traits_297br_RiboZero_noCellType_correction_10202022.RData")
message("Cleaned DLPFC data saved.")

# --- 3.2 Hippocampus Analysis ---

message("\n--- Analyzing Hippocampus ---")
# Reload Hippocampus specific data
# load(file.path(base_path, "Hippocampus/Express_hippo_notClean_Symbol_250samples_12152022.RData"))
# load(file.path(base_path, "Hippocampus/Expr_data_uncleaned_byDx_20708Genes_12152022.RData"))
# load(file.path(base_path, "Metadata_3regions_03262024.RData")) # Reload combined metadata

geneExpr_hippo <- datExpr_minusOutliers[[2]]

# Define the full formula for multicollinearity assessment

print(names(info_hippo))

form_full <- ~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN + rRNA_rate +
  PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 +
  snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
  snpPC8 + snpPC9 + snpPC10

message("\nPerforming initial multicollinearity assessment (full model)...")

# Calculate canonical correlations between pairs of variables in the formula
C_full <- canCorPairs(form_full, info[[2]])
plotCorrMatrix(C_full, dendrogram = "none",
               main = "Canonical Correlations (Full Model)")
message("Correlation matrix plotted for the full model.")

# Fit a linear model for VIF calculation (using an arbitrary gene, expr[,2])
# Transpose geneExpr for lm: samples as rows, genes as columns

expr_transposed <- t(geneExpr_hippo)

fit_gene_full <- lm(expr_transposed[, 2] ~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN + rRNA_rate +
                      PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 +
                      snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
                      snpPC8 + snpPC9 + snpPC10, data = info[[2]])

message("VIF values for the full model:")
print(vif(fit_gene_full)) # Check for multicollinearity
collectGarbage() # Free up memory


form_red_hippo <- ~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN +
  PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 +
  snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
  snpPC8 + snpPC9 + snpPC10

message("Fitting reduced model for Hippocampus and checking VIF...")
fit_gene_hippo_red <- lm(t(geneExpr_hippo)[, 2] ~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN +
                           PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 +
                           snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
                           snpPC8 + snpPC9 + snpPC10, data = info[[2]]) # Ensure 'info' is Hippo-specific
print(vif(fit_gene_hippo_red))
collectGarbage()

message("Plotting correlation matrix for reduced Hippocampus model...")
C2_hippo <- canCorPairs(form_red_hippo, info_hippo)
plotCorrMatrix(C2_hippo, dendrogram = "none",
               main = "Canonical Correlations (Hippocampus Reduced Model)")
collectGarbage()

# Clean the Hippocampus expression data
message("Cleaning Hippocampus expression data...")
covs_hippo <- "~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN +
PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + PC12 +
PC13 + PC14 + snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
snpPC8 + snpPC9 + snpPC10"

mod_hippo <- model.matrix(as.formula(covs_hippo), data = info[[2]]) # Ensure 'info' is correct for Hippo
cleanExprs_protectDx_hippo <- jaffelab::cleaningY(geneExpr_hippo, mod_hippo, P = 2)

# save(cleanExprs_protectDx_hippo, info, covs_hippo, mod_hippo,
#      file = "cleanExprs_traits_250br_Hippo_noCellType_correction_12152022.RData")
message("Cleaned Hippocampus data saved.")

# --- 3.3 Caudate Analysis ---

message("\n--- Analyzing Caudate ---")
# Reload Caudate specific data
# load(file.path(base_path, "Caudate/Express_Caudate_notClean_Symbol_349samples_12162022.RData"))
# load(file.path(base_path, "Caudate/Expr_data_uncleaned_byDx_19954Genes_12162022.RData"))
# load(file.path(base_path, "Metadata_3regions_03262024.RData")) # Reload combined metadata

expr_transposed <- t(geneExpr_caudate)

print(names(info_caudate))

form_full <- ~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN + rRNA_rate +
  PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 + 
  snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
  snpPC8 + snpPC9 + snpPC10

message("\nPerforming initial multicollinearity assessment (full model)...")

fit_gene_full <- lm(expr_transposed[, 2] ~ Dx + Age + Sex + mitoRate + totalAssignedGene + RIN + rRNA_rate +
                      PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 +
                      snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
                      snpPC8 + snpPC9 + snpPC10, data = info[[3]])

message("VIF values for the full model:")
print(vif(fit_gene_full)) # Check for multicollinearity
collectGarbage() # Free up memory

form_red_caudate <- ~ Dx + Age + Sex + mitoRate + RIN +
  PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 +
  snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
  snpPC8 + snpPC9 + snpPC10

message("Fitting reduced model for Caudate and checking VIF...")
fit_gene_caudate_red <- lm(t(geneExpr_caudate)[, 2] ~ Dx + Age + Sex + mitoRate + RIN +
                             PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 +
                             snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
                             snpPC8 + snpPC9 + snpPC10, data = info[[3]]) # Ensure 'info' is Caudate-specific
print(vif(fit_gene_caudate_red))
collectGarbage()

message("Plotting correlation matrix for reduced Caudate model...")
C2_caudate <- canCorPairs(form_red_caudate, info)
plotCorrMatrix(C2_caudate, dendrogram = "none",
               main = "Canonical Correlations (Caudate Reduced Model)")
collectGarbage()

# Clean the Caudate expression data
message("Cleaning Caudate expression data...")
covs_caudate <- "~ Dx + Age + Sex + mitoRate + RIN +
PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10 + PC11 +
snpPC1 + snpPC2 + snpPC3 + snpPC4 + snpPC5 + snpPC6 + snpPC7 +
snpPC8 + snpPC9 + snpPC10"

mod_caudate <- model.matrix(as.formula(covs_caudate), data = info[[3]]) # Ensure 'info' is correct for Caudate
cleanExprs_protectDx_caudate <- jaffelab::cleaningY(geneExpr_caudate, mod_caudate, P = 2)

# save(cleanExprs_protectDx_caudate, info, covs_caudate, mod_caudate,
#      file = "cleanExprs_traits_349br_Caudate_noCellType_correction_12162022.RData")
message("Cleaned Caudate data saved.")
